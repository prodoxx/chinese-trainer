#!/usr/bin/env node
/**
 * Test script to demonstrate the new smart prompt generation system
 * Uses OpenAI to generate culturally accurate, educational prompts
 */

import { generateSmartPrompt } from "../src/lib/enrichment/smart-prompt-generator.ts";

const testCases = [
	// Family terms that need cultural accuracy
	{ hanzi: "Â•∂Â•∂", meaning: "grandma", pinyin: "n«éi n«éi" },
	{ hanzi: "Áà∫Áà∫", meaning: "grandpa", pinyin: "y√© ye" },

	// Places that need cultural context
	{ hanzi: "ÂÖ¨ÂØì", meaning: "apartment", pinyin: "g≈çng y√π" },
	{ hanzi: "Â≠∏Ê†°", meaning: "school", pinyin: "xu√© xi√†o" },

	// Actions that need clarity
	{ hanzi: "ÂêÉ", meaning: "eat", pinyin: "chƒ´" },
	{ hanzi: "Ë∑ë", meaning: "run", pinyin: "p«éo" },

	// Objects that need educational value
	{ hanzi: "Êõ∏", meaning: "book", pinyin: "sh≈´" },
	{ hanzi: "Ëªä", meaning: "car", pinyin: "chƒì" },

	// Grammar particles that need symbolic representation
	{ hanzi: "ÁöÑ", meaning: "particle", pinyin: "de" },
	{ hanzi: "Âóé", meaning: "question particle", pinyin: "ma" },
];

console.log("üß† Testing Smart Image Prompt Generation System");
console.log("==============================================\n");

for (const test of testCases) {
	console.log(`\nüìù Character: ${test.hanzi} (${test.pinyin})`);
	console.log(`   Meaning: ${test.meaning}`);

	try {
		// Generate smart prompt using OpenAI
		const result = await generateSmartPrompt(
			test.hanzi,
			test.meaning,
			test.pinyin,
		);

		console.log(`   ‚úÖ Generated Smart Prompt:`);
		console.log(`      "${result.prompt}"`);
		console.log(`   üö´ Negative Prompt:`);
		console.log(`      "${result.negativePrompt}"`);

		// Show quality metrics
		console.log(`   üìä Quality Metrics:`);
		console.log(
			`      Cultural Accuracy: ${(result.culturalAccuracy * 100).toFixed(0)}%`,
		);
		console.log(
			`      Educational Value: ${(result.educationalValue * 100).toFixed(0)}%`,
		);
		console.log(`      Clarity: ${(result.clarity * 100).toFixed(0)}%`);
		console.log(
			`      Overall Confidence: ${(result.confidence * 100).toFixed(0)}%`,
		);

		// Show metadata
		console.log(`   üéØ Strategy: ${result.metadata.visualStrategy}`);
		console.log(`   üåç Cultural Context: ${result.metadata.culturalContext}`);
		console.log(
			`   üéì Learning Objective: ${result.metadata.learningObjective}`,
		);

		// TEMPORARILY DISABLED: Validate the generated prompt
		// console.log(`   üîç Validating prompt quality...`);
		// const validation = await validatePrompt(
		// 	result.prompt,
		// 	test.hanzi,
		// 	test.meaning,
		// );

		// if (validation.isValid) {
		// 	console.log(`   ‚úÖ Validation: ${validation.quality.toUpperCase()}`);
		// } else {
		// 	console.log(`   ‚ùå Validation: ${validation.quality.toUpperCase()}`);
		// 	if (validation.issues.length > 0) {
		// 		console.log(`      Issues: ${validation.issues.join(", ")}`);
		// 	}
		// 	if (validation.suggestions.length > 0) {
		// 		console.log(`      Suggestions: ${validation.suggestions.join(", ")}`);
		// 	}
		// }

		console.log(`   üîç Validation: TEMPORARILY DISABLED`);
	} catch (error) {
		console.log(`   ‚ùå Error: ${error.message}`);
	}
}

console.log("\n\n‚ú® Summary of Smart Prompt Generation:");
console.log("- Uses OpenAI GPT-4o-mini for intelligent prompt creation");
console.log("- Emphasizes cultural accuracy and educational value");
console.log("- Includes negative prompts to avoid unwanted elements");
console.log("- Automatic quality validation and improvement");
console.log("- Fallback to basic generation if AI fails");
console.log("- Focuses on clarity, simplicity, and cultural sensitivity");
